import axios from "axios";

const API_BASE = `${import.meta.env.VITE_API_URL}/github/proxy`;

// ‚úÖ Î∞±ÏóîÎìú ÌîÑÎ°ùÏãú Í≤ΩÎ°ú ÏÑ§Ï†ï
const github = axios.create({
  baseURL: API_BASE,
});

/**
 * üîç GitHub Ïú†Ï†Ä Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const getGitHubUserInfo = async (username) => {
  const token = localStorage.getItem("jwt");

  try {
    const res = await github.get("", {
      params: {
        path: `/users/${username}`,
      },
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    const { followers, following, public_repos, login, name, avatar_url } =
      res.data;
    return { followers, following, public_repos, login, name, avatar_url };
  } catch (error) {
    console.error("‚ùå GitHub Ïú†Ï†Ä Ï†ïÎ≥¥ ÏöîÏ≤≠ Ïã§Ìå®:", error);
    throw error;
  }
};

/**
 * üìÑ ÌäπÏ†ï Î†àÌè¨ÏßÄÌÜ†Î¶¨Ïùò README.md Î∂àÎü¨Ïò§Í∏∞
 */
export const fetchReadme = async (owner, repo) => {
  const token = localStorage.getItem("jwt");

  try {
    const res = await github.get("", {
      params: {
        path: `/repos/${owner}/${repo}/readme`,
      },
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github.v3.raw", // ‚úÖ Î∞òÎìúÏãú raw ÏÑ§Ï†ï ÌïÑÏöî
      },
    });

    return typeof res.data === "string" ? res.data : res.data.content;
  } catch (error) {
    console.error("‚ùå README.md Î°úÎî© Ïã§Ìå®:", error);
    return "README.md Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.";
  }
};

/**
 * üìä Î†àÌè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù Ï°∞Ìöå (Ï†ïÎ†¨ + ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏßÄÏõê)
 * @param {"stars" | "updated" | "created"} sort - Ï†ïÎ†¨ Í∏∞Ï§Ä
 * @param {number} page - ÌéòÏù¥ÏßÄ Î≤àÌò∏ (1Î∂ÄÌÑ∞ ÏãúÏûë)
 */
export const fetchRepos = async (sort = "stars", page = 1) => {
  const token = localStorage.getItem("jwt");

  let query = "stars:>100";

  if (sort === "created") {
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
    const formattedDate = oneYearAgo.toISOString().split("T")[0];
    query = `created:>${formattedDate}`;
  }

  try {
    const res = await github.get("", {
      params: {
        path: "/search/repositories",
        q: query,
        sort,
        order: "desc",
        per_page: 10,
        page,
      },
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    return res.data.items;
  } catch (error) {
    console.error("‚ùå Î†àÌè¨ÏßÄÌÜ†Î¶¨ Î°úÎî© Ïã§Ìå®:", error);
    throw error;
  }
};

export const getRegisteredUsers = async () => {
  try {
    const token = localStorage.getItem("jwt");
    const response = await fetch("/api/challenge/registered", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    const text = await response.text();
    console.log("Registered users response text:", text);

    if (!response.ok) throw new Error("Failed to fetch registered users");
    return JSON.parse(text);
  } catch (error) {
    console.error("‚ùå Îì±Î°ùÎêú Ïú†Ï†Ä Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
    return [];
  }
};

export const registerUser = async (user) => {
  try {
    const token = localStorage.getItem("jwt");
    const response = await fetch("/api/challenge/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(user),
    });
    if (!response.ok) throw new Error("Failed to register user");
  } catch (error) {
    console.error("‚ùå Ïú†Ï†Ä Îì±Î°ù Ïã§Ìå®:", error);
    throw error;
  }
};
